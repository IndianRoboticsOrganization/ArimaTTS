%!PS-Adobe-2.0 EPSF-1.2
%%Title: MMFeg.eps
%%Creator: CLARIS EPSF Export Filter V1.0
%%CreationDate:3/17/97  10:39:20 p.m.
%%BoundingBox: 26 593 334 765                                                                          
%%QDBoundingBox: 26.500 27.500 333.513 198.500                                                           
%%DocumentFonts: 
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%ObjectsIncluded: tText=T tLine=F tRect=T tRRect=F tOval=F tArc=F tFree=F tPoly=F tBMap=F tNote=F tBez=F tPMap=F 
%%AttributesIncluded: kBaWPattType=T kPixPattType=F kGradientType=F 
%%EndComments
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
%%BeginProcSet : rect 
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
%%EndProcSet 
%%BeginProcSet : R 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
%%EndProcSet
%%BeginProcSet : SaveScreenBW
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
%%EndProcSet
%%BeginProcSet : RestoreScreenBW
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
%%EndProcSet
%%BeginProcSet : SetFreqAngleBW
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
%%EndProcSet
%%BeginProcSet : SaveScreenColor 
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
%%EndProcSet
%%BeginProcSet : RestoreColorScreen
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
%%EndProcSet
%%BeginProcSet : SetFreqAngleColor
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
%%EndProcSet 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
   {
   exch
   dup 0 lt {
      1 index sub
   } if
   1 index
   div truncate
   mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
   0.0 exch dtransform
   round
   idtransform exch pop
} bind def
 /AutoSizeX {
   0.0 dtransform
   exch
   round
   exch
   idtransform pop
} bind def 
/AutoCellSize {
   AutoSizeY
   exch
   AutoSizeX
   exch
} bind def
/CheckPath {
   false
   { pop pop pop true exit}
   { pop pop pop true exit}
   { pop pop pop pop pop pop pop true exit}
   { pop true exit}
   pathforall
} bind def
/PatternFill {             %     patternCharacter
   /patternString 1 string def
   /cm mstore def
   patternMatrix setmatrix
   1 1 AutoCellSize
   dup 0 eq { pop 1} if
   exch
   dup 0 eq { pop 1} if
   exch
   /patternSize exch 24.0 mul def
   /PatternSizeX exch 24.0 mul patternString length mul def
   /flaterror 0 def
   patternString FillPatternString
   gsave
      flaterror 1 add setflat
      flattenpath
      pathbbox
   grestore
   psy add flaterror add psy SnapToPattenGrid
   exch psx add flaterror add psx SnapToPattenGrid
   3 -1 roll flaterror sub psy SnapToPattenGrid
   4 -1 roll flaterror sub psx SnapToPattenGrid
   4 2 roll pll
   4 2 roll pll
   /llxsnap exch def
   /llysnap exch def
   /urxsnap exch def
   /urysnap exch def
   gsave
      useClip true eq {clip}{eoclip} ifelse newpath
      /PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
      llysnap patternSize urysnap {
         llxsnap exch moveto
         llxsnap PatternSizeX urxsnap {
            pop
            patternString show
            %currentpoint am
         } for
      } bind for
   grestore
   cm setmatrix
} bind def           %     End 'PatternFill'
/DefaultPatternFont {
   /cm mstore def
   patternMatrix setmatrix
   1 1 AutoCellSize
   dup 0 eq { pop 1} if
   exch
   dup 0 eq { pop 1} if
   exch
   /psy exch iSizeY mul def
   /psx exch iSizeX mul def
   /patternDict 64 dict def
   patternDict begin
      /NotDef {} def
      /LiteDiagLines {
         iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
         {pat}
         imagemask
      } bind def
   end
   /CustEncoding 256 array def
   0 255 1 {
      CustEncoding exch /NotDef put
   } bind for
   CustEncoding 65 /LiteDiagLines put
   patternDict CustEncoding /PatternFont MakePatternFont
   /pathSegProc {
      strokepath
      CheckPath {
         65 PatternFill newpath
      } if
   } bind def
   cm setmatrix
} bind def
/XRound {
   dup
   3 -1 roll
   exch mul round
   exch div
} bind def
/RoundMatrix {
   /i 0 def
   dup {
      100000.0 XRound
      1 index
      exch i exch put
      /i i 1 add def
   } forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
%%BeginProcSet : Text Attributes Procs
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
   currentdict /outlineFontSize known {
      /outlineFontSize 2 index def
   } if
   findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
     }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont {
findfont dup
length dict
begin
{  1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
%%EndProcSet
%%BeginProcSet : SR 
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
%%EndProcSet 
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
   0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def

%%EndProlog
initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
%
%tLayer
%
%@BeginText
save
%%IncludeFont: Courier
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 27.500 36.500 0.000 0.000 13.000 32.405 rect
%@EndRect
gsave
52.702 34.000 T translate
0.0 rotate
1 1 scale
9.000 (Courier) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(m) -16.000 4.000 S
(a) -10.599 4.000 S
(c) -5.198 4.000 S
(r) 0.202 4.000 S
(o) 5.603 4.000 S
(s) 11.004 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 50.500 36.500 0.000 0.000 73.000 135.013 rect
%@EndRect
gsave
104.006 87.000 T translate
0.0 rotate
1 1 scale
9.000 (Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(~) -67.000 -26.000 S
(o) -61.599 -26.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -67.000 -14.000 S
( ) -61.599 -14.000 S
( ) -56.198 -14.000 S
(<) -50.797 -14.000 S
(V) -45.396 -14.000 S
(e) -39.995 -14.000 S
(c) -34.594 -14.000 S
(S) -29.193 -14.000 S
(i) -23.792 -14.000 S
(z) -18.392 -14.000 S
(e) -12.991 -14.000 S
(>) -7.590 -14.000 S
( ) -2.189 -14.000 S
(3) 3.211 -14.000 S
(9) 8.612 -14.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -67.000 -2.000 S
( ) -61.599 -2.000 S
( ) -56.198 -2.000 S
(<) -50.797 -2.000 S
(M) -45.396 -2.000 S
(F) -39.995 -2.000 S
(C) -34.594 -2.000 S
(C) -29.193 -2.000 S
(_) -23.792 -2.000 S
(0) -18.392 -2.000 S
(_) -12.991 -2.000 S
(D) -7.590 -2.000 S
(_) -2.189 -2.000 S
(A) 3.211 -2.000 S
(>) 8.612 -2.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(~) -67.000 10.000 S
(v) -61.599 10.000 S
( ) -56.198 10.000 S
(") -50.797 10.000 S
(v) -45.396 10.000 S
(a) -39.995 10.000 S
(r) -34.594 10.000 S
(F) -29.193 10.000 S
(l) -23.792 10.000 S
(o) -18.392 10.000 S
(o) -12.991 10.000 S
(r) -7.590 10.000 S
(1) -2.189 10.000 S
(") 3.211 10.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -67.000 22.000 S
( ) -61.599 22.000 S
( ) -56.198 22.000 S
(<) -50.797 22.000 S
(V) -45.396 22.000 S
(a) -39.995 22.000 S
(r) -34.594 22.000 S
(i) -29.193 22.000 S
(a) -23.792 22.000 S
(n) -18.392 22.000 S
(c) -12.991 22.000 S
(e) -7.590 22.000 S
(>) -2.189 22.000 S
( ) 3.211 22.000 S
(3) 8.612 22.000 S
(9) 14.013 22.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -67.000 34.000 S
( ) -61.599 34.000 S
( ) -56.198 34.000 S
( ) -50.797 34.000 S
( ) -45.396 34.000 S
( ) -39.995 34.000 S
(0) -34.594 34.000 S
(.) -29.193 34.000 S
(0) -23.792 34.000 S
(0) -18.392 34.000 S
(1) -12.991 34.000 S
(2) -7.590 34.000 S
( ) -2.189 34.000 S
(0) 3.211 34.000 S
(.) 8.612 34.000 S
(0) 14.013 34.000 S
(0) 19.414 34.000 S
(0) 24.814 34.000 S
(3) 30.215 34.000 S
( ) 35.616 34.000 S
(.) 41.017 34.000 S
(.) 46.418 34.000 S
(.) 51.819 34.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 45.000 27.000 0.000 0.000 90.000 135.000 rect
%@EndRect
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 27.500 198.500 0.000 0.000 13.000 37.806 rect
%@EndRect
gsave
217.403 34.000 T translate
0.0 rotate
1 1 scale
9.000 (Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(h) -18.000 4.000 S
(m) -12.599 4.000 S
(m) -7.198 4.000 S
(d) -1.797 4.000 S
(e) 3.603 4.000 S
(f) 9.004 4.000 S
(s) 14.405 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 49.500 198.500 0.000 0.000 85.000 135.013 rect
%@EndRect
gsave
266.006 92.000 T translate
0.0 rotate
1 1 scale
9.000 (Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(~) -67.000 -32.000 S
(h) -61.599 -32.000 S
( ) -56.198 -32.000 S
(") -50.797 -32.000 S
(a) -45.396 -32.000 S
(a) -39.995 -32.000 S
(") -34.594 -32.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -67.000 -20.000 S
( ) -61.599 -20.000 S
( ) -56.198 -20.000 S
(<) -50.797 -20.000 S
(B) -45.396 -20.000 S
(e) -39.995 -20.000 S
(g) -34.594 -20.000 S
(i) -29.193 -20.000 S
(n) -23.792 -20.000 S
(H) -18.392 -20.000 S
(M) -12.991 -20.000 S
(M) -7.590 -20.000 S
(>) -2.189 -20.000 S
( ) 3.211 -20.000 S
(.) 8.612 -20.000 S
(.) 14.013 -20.000 S
(.) 19.414 -20.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -67.000 -8.000 S
( ) -61.599 -8.000 S
( ) -56.198 -8.000 S
(<) -50.797 -8.000 S
(E) -45.396 -8.000 S
(n) -39.995 -8.000 S
(d) -34.594 -8.000 S
(H) -29.193 -8.000 S
(M) -23.792 -8.000 S
(M) -18.392 -8.000 S
(>) -12.991 -8.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(~) -67.000 4.000 S
(h) -61.599 4.000 S
( ) -56.198 4.000 S
(") -50.797 4.000 S
(e) -45.396 4.000 S
(h) -39.995 4.000 S
(") -34.594 4.000 S
( ) -29.193 4.000 S
( ) -23.792 4.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -67.000 16.000 S
( ) -61.599 16.000 S
( ) -56.198 16.000 S
(<) -50.797 16.000 S
(B) -45.396 16.000 S
(e) -39.995 16.000 S
(g) -34.594 16.000 S
(i) -29.193 16.000 S
(n) -23.792 16.000 S
(H) -18.392 16.000 S
(M) -12.991 16.000 S
(M) -7.590 16.000 S
(>) -2.189 16.000 S
( ) 3.211 16.000 S
(.) 8.612 16.000 S
(.) 14.013 16.000 S
(.) 19.414 16.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -67.000 28.000 S
( ) -61.599 28.000 S
( ) -56.198 28.000 S
(<) -50.797 28.000 S
(E) -45.396 28.000 S
(n) -39.995 28.000 S
(d) -34.594 28.000 S
(H) -29.193 28.000 S
(M) -23.792 28.000 S
(M) -18.392 28.000 S
(>) -12.991 28.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(.) -67.000 40.000 S
(.) -61.599 40.000 S
(.) -56.198 40.000 S
( ) -50.797 40.000 S
(e) -45.396 40.000 S
(t) -39.995 40.000 S
(c) -34.594 40.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 45.000 189.000 0.000 0.000 153.000 135.000 rect
%@EndRect
restore
%%Trailer
end
