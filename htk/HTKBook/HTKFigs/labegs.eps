%!PS-Adobe-2.0 EPSF-1.2
%%Title: labegs.eps
%%Creator: CLARIS EPSF Export Filter V1.0
%%CreationDate:2/13/95  8:30:13 p.m.
%%BoundingBox: 8.500 417.386 207.500 783.500                                                           
%%QDBoundingBox: 8.500 8.500 207.500 374.613                                                             
%%DocumentFonts: Times-Roman
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%ObjectsIncluded: tText=T tLine=T tRect=T tRRect=F tOval=F tArc=F tFree=T tPoly=T tBMap=F tNote=F tBez=T tPMap=F 
%%AttributesIncluded: kBaWPattType=T kPixPattType=F kGradientType=F 
%%EndComments
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
%%BeginProcSet : rect 
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
%%EndProcSet 
%%BeginProcSet : R 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
%%EndProcSet
%%BeginProcSet : SaveScreenBW
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
  } bind def
%%EndProcSet
%%BeginProcSet : RestoreScreenBW
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
%%EndProcSet
%%BeginProcSet : SetFreqAngleBW
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
%%EndProcSet
%%BeginProcSet : SaveScreenColor 
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
  } bind def
%%EndProcSet
%%BeginProcSet : RestoreColorScreen
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
%%EndProcSet
%%BeginProcSet : SetFreqAngleColor
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
%%EndProcSet 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
%%BeginProcSet : Text Attributes Procs
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
%%EndProcSet
%%BeginProcSet : clip2pathbbox
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
%%EndProcSet 
%% Line takes the following arguments:
%% linewidth xEnd yEnd xStart yStart
%%BeginProcSet : Line
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
%%EndProcSet 
%%BeginProcSet : SR 
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
%%EndProcSet 



/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def

%%EndProlog
initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
%
%tLayer
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 38.496 11.312 0.000 0.000 23.100 17.092
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[-0.000 10.813] CP
[0.396 3.604 0.817 0.245 1.263 0.737] CP
[1.709 1.228 2.105 3.276 2.452 6.881] CP
[2.799 10.485 3.369 14.089 4.161 17.694] CP
[4.954 21.298 5.548 22.445 5.945 21.134] CP
[6.341 19.823 6.688 17.612 6.985 14.499] CP
[7.283 11.386 7.704 8.847 8.249 6.881] CP
[8.794 4.915 9.314 5.242 9.809 7.864] CP
[10.305 10.485 10.652 12.615 10.850 14.253] CP
[11.048 15.891 11.593 15.236 12.485 12.287] CP
[13.377 9.338 14.293 8.355 15.234 9.338] CP
[16.176 10.321 16.795 10.649 17.092 10.321] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 36.038 28.554 0.000 0.000 20.643 19.768
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 12.812] CP
[0.590 12.338 1.081 11.547 1.475 10.440] CP
[1.868 9.332 2.175 8.344 2.397 7.474] CP
[2.618 6.604 2.839 5.378 3.061 3.796] CP
[3.282 2.214 3.565 1.186 3.909 0.711] CP
[4.253 0.237 4.597 0.672 4.942 2.016] CP
[5.286 3.361 5.556 4.785 5.753 6.287] CP
[5.950 7.790 6.110 8.739 6.232 9.135] CP
[6.355 9.530 6.491 10.479 6.638 11.982] CP
[6.786 13.485 7.068 15.146 7.486 16.965] CP
[7.904 18.784 8.224 19.852 8.445 20.168] CP
[8.667 20.484 8.962 20.524 9.330 20.287] CP
[9.699 20.049 9.945 19.654 10.068 19.100] CP
[10.191 18.547 10.400 17.321 10.695 15.422] CP
[10.990 13.524 11.273 12.022 11.543 10.914] CP
[11.814 9.807 12.023 8.779 12.170 7.830] CP
[12.318 6.881 12.490 6.920 12.687 7.948] CP
[12.883 8.976 13.092 10.163 13.314 11.507] CP
[13.535 12.852 13.805 13.801 14.125 14.355] CP
[14.445 14.908 14.678 14.394 14.826 12.812] CP
[14.973 11.231 15.109 9.886 15.231 8.779] CP
[15.354 7.671 15.576 7.671 15.895 8.779] CP
[16.215 9.886 16.498 11.151 16.744 12.575] CP
[16.989 13.999 17.235 14.790 17.481 14.948] CP
[17.727 15.106 17.936 14.592 18.108 13.406] CP
[18.280 12.219 18.551 11.428 18.920 11.033] CP
[19.288 10.637 19.571 11.072 19.768 12.338] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 39.688 48.593 0.000 0.000 17.129 21.214
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.343] CP
[1.247 3.114] CP
[2.495 17.129 ] CP
[3.743 0.000 ] CP
[4.991 17.129 ] CP
[6.239 1.557 ] CP
[7.487 17.129 ] CP
[8.735 0.000 ] CP
[9.983 17.129 ] CP
[11.231 0.000 ] CP
[12.479 17.129 ] CP
[13.727 1.557 ] CP
[14.975 17.129 ] CP
[16.223 4.671 ] CP
[17.471 15.572 ] CP
[18.719 6.228 ] CP
[19.967 12.457 ] CP
[21.214 9.343 ] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 46.901 69.692 0.000 0.000 6.787 18.645
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 1.850] CP
[0.305 1.233] CP
[0.305 0.616 ] CP
[0.611 0.616 ] CP
[0.611 -0.000 ] CP
[0.917 -0.000 ] CP
[0.917 0.616 ] CP
[1.222 0.616 ] CP
[1.528 1.233 ] CP
[1.834 1.233 ] CP
[1.834 1.850 ] CP
[2.139 1.850 ] CP
[2.445 1.850 ] CP
[2.445 2.468 ] CP
[2.751 2.468 ] CP
[2.751 3.085 ] CP
[2.751 3.702 ] CP
[3.056 4.936 ] CP
[3.362 4.936 ] CP
[3.668 4.936 ] CP
[3.973 4.936 ] CP
[4.279 4.936 ] CP
[4.585 4.936 ] CP
[4.890 4.319 ] CP
[4.890 3.702 ] CP
[5.196 3.702 ] CP
[5.196 3.085 ] CP
[5.502 3.085 ] CP
[5.502 2.468 ] CP
[5.807 2.468 ] CP
[6.113 2.468 ] CP
[7.030 2.468 ] CP
[7.336 3.085 ] CP
[7.336 3.702 ] CP
[7.641 3.702 ] CP
[7.641 4.319 ] CP
[7.947 4.319 ] CP
[7.947 4.936 ] CP
[8.253 4.936 ] CP
[8.558 4.936 ] CP
[8.558 5.553 ] CP
[8.864 5.553 ] CP
[8.864 4.936 ] CP
[8.864 4.319 ] CP
[9.170 3.702 ] CP
[9.170 4.319 ] CP
[9.475 4.319 ] CP
[9.475 4.936 ] CP
[9.781 4.936 ] CP
[9.781 5.553 ] CP
[10.087 5.553 ] CP
[10.087 6.170 ] CP
[10.392 6.170 ] CP
[10.698 6.170 ] CP
[11.004 5.553 ] CP
[11.004 4.936 ] CP
[11.004 4.319 ] CP
[11.309 4.319 ] CP
[11.615 4.319 ] CP
[11.615 3.702 ] CP
[11.921 3.702 ] CP
[12.226 3.702 ] CP
[12.532 3.702 ] CP
[12.838 3.702 ] CP
[13.143 3.702 ] CP
[13.143 4.319 ] CP
[13.449 4.936 ] CP
[13.449 5.553 ] CP
[13.755 5.553 ] CP
[13.755 6.170 ] CP
[14.060 6.170 ] CP
[14.060 6.787 ] CP
[14.366 6.787 ] CP
[14.672 6.787 ] CP
[14.977 6.787 ] CP
[14.977 6.170 ] CP
[14.977 5.553 ] CP
[14.977 4.936 ] CP
[14.977 4.319 ] CP
[14.977 3.702 ] CP
[14.977 3.085 ] CP
[14.977 2.468 ] CP
[14.977 1.850 ] CP
[15.283 1.850 ] CP
[15.589 1.850 ] CP
[16.200 1.233 ] CP
[16.506 1.233 ] CP
[16.506 1.850 ] CP
[16.506 2.468 ] CP
[16.811 2.468 ] CP
[17.117 2.468 ] CP
[17.117 3.085 ] CP
[17.117 3.702 ] CP
[17.423 3.702 ] CP
[17.728 3.702 ] CP
[17.728 4.319 ] CP
[18.034 4.319 ] CP
[18.340 4.319 ] CP
[18.645 4.319 ] CP
[18.645 3.702 ] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 41.636 88.717 0.000 0.000 20.120 26.701
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.001] CP
[1.012 3.000 1.696 1.235 2.053 3.706] CP
[2.411 6.177 2.768 8.383 3.125 10.324] CP
[3.482 12.266 3.795 11.825 4.063 9.001] CP
[4.331 6.177 4.524 4.412 4.643 3.706] CP
[4.762 3.000 5.030 4.235 5.447 7.412] CP
[5.864 10.589 6.161 13.501 6.340 16.149] CP
[6.519 18.796 6.801 18.973 7.188 16.678] CP
[7.575 14.384 8.066 11.295 8.662 7.412] CP
[9.257 3.529 9.704 1.853 10.001 2.382] CP
[10.299 2.912 10.567 4.235 10.805 6.353] CP
[11.043 8.471 11.371 9.618 11.787 9.795] CP
[12.204 9.971 12.591 9.618 12.948 8.736] CP
[13.305 7.853 13.648 7.853 13.975 8.736] CP
[14.303 9.618 14.615 9.883 14.913 9.530] CP
[15.211 9.177 15.672 9.442 16.297 10.324] CP
[16.922 11.207 17.443 11.560 17.860 11.383] CP
[18.277 11.207 18.664 10.766 19.021 10.060] CP
[19.378 9.354 19.720 8.559 20.048 7.677] CP
[20.375 6.794 20.703 6.883 21.030 7.942] CP
[21.358 9.001 21.730 9.795 22.146 10.324] CP
[22.563 10.854 22.980 10.677 23.397 9.795] CP
[23.813 8.912 24.185 8.736 24.513 9.265] CP
[24.840 9.795 25.570 10.060 26.701 10.060] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 37.599 115.597 0.000 0.000 29.887 17.704
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 13.990] CP
[0.410 4.663 0.846 0.317 1.308 0.953] CP
[1.770 1.589 2.180 4.239 2.540 8.902] CP
[2.899 13.566 3.489 18.229 4.310 22.892] CP
[5.131 27.556 5.747 29.039 6.158 27.344] CP
[6.568 25.648 6.927 22.786 7.235 18.759] CP
[7.543 14.731 7.979 11.446 8.544 8.902] CP
[9.108 6.359 9.647 6.783 10.160 10.174] CP
[10.673 13.566 11.033 16.321 11.238 18.441] CP
[11.443 20.561 12.008 19.713 12.931 15.897] CP
[13.855 12.082 14.804 10.810 15.779 12.082] CP
[16.754 13.354 17.396 13.778 17.704 13.354] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 39.451 133.486 0.000 0.000 24.951 17.704
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 11.679] CP
[0.410 3.893 0.846 0.265 1.308 0.796] CP
[1.770 1.327 2.180 3.539 2.540 7.432] CP
[2.899 11.325 3.489 15.218 4.310 19.111] CP
[5.131 23.005 5.747 24.243 6.157 22.828] CP
[6.568 21.412 6.927 19.023 7.235 15.661] CP
[7.543 12.298 7.979 9.555 8.544 7.432] CP
[9.108 5.308 9.647 5.662 10.160 8.494] CP
[10.673 11.325 11.033 13.626 11.238 15.395] CP
[11.443 17.165 12.008 16.457 12.931 13.272] CP
[13.855 10.086 14.804 9.025 15.779 10.086] CP
[16.754 11.148 17.396 11.502 17.704 11.148] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 40.844 151.986 0.000 0.000 20.930 16.481
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.797] CP
[0.382 3.265 0.788 0.222 1.218 0.667] CP
[1.648 1.113 2.030 2.968 2.364 6.234] CP
[2.699 9.500 3.248 12.766 4.012 16.032] CP
[4.777 19.297 5.350 20.337 5.732 19.149] CP
[6.114 17.961 6.449 15.957 6.735 13.137] CP
[7.022 10.316 7.428 8.016 7.954 6.234] CP
[8.479 4.453 8.981 4.750 9.458 7.125] CP
[9.936 9.500 10.271 11.430 10.462 12.914] CP
[10.653 14.399 11.178 13.805 12.038 11.133] CP
[12.898 8.461 13.782 7.570 14.690 8.461] CP
[15.597 9.352 16.194 9.648 16.481 9.352] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 42.270 168.729 0.000 0.000 15.412 31.178
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[31.178 7.472] CP
[30.877 6.177 30.890 4.324 30.405 4.152] CP
[30.193 4.076 30.119 4.776 29.984 5.337] CP
[29.614 6.882 29.761 8.691 29.282 9.844] CP
[28.989 10.551 28.718 10.624 28.369 10.319] CP
[28.067 10.053 27.964 9.384 27.737 8.658] CP
[27.343 7.395 27.291 6.041 26.824 5.100] CP
[26.607 4.664 26.428 4.324 26.192 4.626] CP
[25.495 5.516 25.681 8.410 25.069 9.844] CP
[24.648 10.829 24.310 11.297 23.805 11.030] CP
[22.671 10.431 22.177 8.248 21.347 5.575] CP
[21.077 4.706 21.121 3.508 20.785 2.966] CP
[20.290 2.167 19.873 2.387 19.381 3.203] CP
[18.927 3.954 18.783 5.031 18.538 6.523] CP
[18.093 9.236 18.564 12.223 17.836 14.114] CP
[17.336 15.412 16.804 15.157 16.221 14.351] CP
[15.701 13.632 15.571 12.321 15.238 10.793] CP
[15.107 10.192 15.096 9.712 14.957 9.133] CP
[14.749 8.268 14.490 8.198 14.325 7.235] CP
[14.058 5.682 14.364 4.162 14.044 2.728] CP
[13.689 1.144 13.288 -0.000 12.710 0.356] CP
[11.450 1.134 11.397 5.467 10.533 8.658] CP
[10.075 10.348 9.942 11.881 9.339 12.928] CP
[8.798 13.866 8.385 14.128 7.794 13.639] CP
[7.012 12.991 6.757 11.223 6.109 9.607] CP
[5.747 8.706 5.572 8.066 5.196 7.235] CP
[4.673 6.079 4.397 5.151 3.791 4.626] CP
[3.261 4.166 2.921 4.220 2.387 4.626] CP
[1.825 5.053 1.599 6.149 1.053 6.761] CP
[0.655 7.206 0.410 7.195 0.000 7.472] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 9.000 9.000 0.000 0.000 14.497 198.000 rect
%@EndRect
%@BeginText
save
%%IncludeFont: Times-Roman
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 9.000 33.942 0.000 0.000 16.000 19.256 rect
%@EndRect
gsave
43.571 17.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -9.557 4.000 S
(c) -5.667 4.000 S
(e) 0.546 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 9.000 122.142 0.000 0.000 16.000 75.492 rect
%@EndRect
gsave
159.889 17.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(c) -37.357 4.000 S
(r) -31.143 4.000 S
(e) -26.481 4.000 S
(a) -20.267 4.000 S
(m) -14.053 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 71.228 23.497 71.228 9.000 Line
%@EndLine
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 79.613 30.914 0.000 0.000 16.000 157.262 rect
%@EndRect
gsave
109.545 87.613 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -78.585 4.000 S
(a) -73.923 4.000 S
(\)) -67.709 4.000 S
( ) -63.047 4.000 S
(1) -59.547 4.000 S
(-) -52.547 4.000 S
(a) -47.885 4.000 S
(l) -41.671 4.000 S
(t) -37.781 4.000 S
(e) -33.892 4.000 S
(r) -27.678 4.000 S
(n) -23.016 4.000 S
(a) -16.016 4.000 S
(t) -9.802 4.000 S
(i) -5.912 4.000 S
(v) -2.023 4.000 S
(e) 4.976 4.000 S
(,) 11.190 4.000 S
( ) 14.690 4.000 S
(1) 18.190 4.000 S
(-) 25.190 4.000 S
(l) 29.852 4.000 S
(e) 33.742 4.000 S
(v) 39.956 4.000 S
(e) 46.956 4.000 S
(l) 53.170 4.000 S
grestore
%@EndText
%
%tfEndGrp
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 165.496 11.312 0.000 0.000 23.100 17.092
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[-0.000 10.813] CP
[0.396 3.604 0.817 0.245 1.263 0.737] CP
[1.709 1.228 2.105 3.276 2.452 6.881] CP
[2.799 10.485 3.369 14.089 4.161 17.694] CP
[4.954 21.298 5.548 22.445 5.945 21.134] CP
[6.341 19.823 6.688 17.612 6.985 14.499] CP
[7.283 11.386 7.704 8.847 8.249 6.881] CP
[8.794 4.915 9.314 5.242 9.809 7.864] CP
[10.305 10.485 10.652 12.615 10.850 14.253] CP
[11.048 15.891 11.593 15.236 12.485 12.287] CP
[13.377 9.338 14.293 8.355 15.234 9.338] CP
[16.176 10.321 16.795 10.649 17.092 10.321] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 163.038 28.554 0.000 0.000 20.643 19.768
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 12.812] CP
[0.590 12.338 1.081 11.547 1.475 10.440] CP
[1.868 9.332 2.175 8.344 2.397 7.474] CP
[2.618 6.604 2.839 5.378 3.061 3.796] CP
[3.282 2.214 3.565 1.186 3.909 0.711] CP
[4.253 0.237 4.597 0.672 4.942 2.016] CP
[5.286 3.361 5.556 4.785 5.753 6.287] CP
[5.950 7.790 6.110 8.739 6.232 9.135] CP
[6.355 9.530 6.491 10.479 6.638 11.982] CP
[6.786 13.485 7.068 15.146 7.486 16.965] CP
[7.904 18.784 8.224 19.852 8.445 20.168] CP
[8.667 20.484 8.962 20.524 9.330 20.287] CP
[9.699 20.049 9.945 19.654 10.068 19.100] CP
[10.191 18.547 10.400 17.321 10.695 15.422] CP
[10.990 13.524 11.273 12.022 11.543 10.914] CP
[11.814 9.807 12.023 8.779 12.170 7.830] CP
[12.318 6.881 12.490 6.920 12.687 7.948] CP
[12.883 8.976 13.092 10.163 13.314 11.507] CP
[13.535 12.852 13.805 13.801 14.125 14.355] CP
[14.445 14.908 14.678 14.394 14.826 12.812] CP
[14.973 11.231 15.109 9.886 15.231 8.779] CP
[15.354 7.671 15.576 7.671 15.895 8.779] CP
[16.215 9.886 16.498 11.151 16.744 12.575] CP
[16.989 13.999 17.235 14.790 17.481 14.948] CP
[17.727 15.106 17.936 14.592 18.108 13.406] CP
[18.280 12.219 18.551 11.428 18.920 11.033] CP
[19.288 10.637 19.571 11.072 19.768 12.338] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 166.688 48.593 0.000 0.000 17.129 21.214
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.343] CP
[1.247 3.114] CP
[2.495 17.129 ] CP
[3.743 0.000 ] CP
[4.991 17.129 ] CP
[6.239 1.557 ] CP
[7.487 17.129 ] CP
[8.735 0.000 ] CP
[9.983 17.129 ] CP
[11.231 0.000 ] CP
[12.479 17.129 ] CP
[13.727 1.557 ] CP
[14.975 17.129 ] CP
[16.223 4.671 ] CP
[17.471 15.572 ] CP
[18.719 6.228 ] CP
[19.967 12.457 ] CP
[21.214 9.343 ] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 173.901 69.692 0.000 0.000 6.787 18.645
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 1.850] CP
[0.305 1.233] CP
[0.305 0.616 ] CP
[0.611 0.616 ] CP
[0.611 -0.000 ] CP
[0.917 -0.000 ] CP
[0.917 0.616 ] CP
[1.222 0.616 ] CP
[1.528 1.233 ] CP
[1.834 1.233 ] CP
[1.834 1.850 ] CP
[2.139 1.850 ] CP
[2.445 1.850 ] CP
[2.445 2.468 ] CP
[2.751 2.468 ] CP
[2.751 3.085 ] CP
[2.751 3.702 ] CP
[3.056 4.936 ] CP
[3.362 4.936 ] CP
[3.668 4.936 ] CP
[3.973 4.936 ] CP
[4.279 4.936 ] CP
[4.585 4.936 ] CP
[4.890 4.319 ] CP
[4.890 3.702 ] CP
[5.196 3.702 ] CP
[5.196 3.085 ] CP
[5.502 3.085 ] CP
[5.502 2.468 ] CP
[5.807 2.468 ] CP
[6.113 2.468 ] CP
[7.030 2.468 ] CP
[7.336 3.085 ] CP
[7.336 3.702 ] CP
[7.641 3.702 ] CP
[7.641 4.319 ] CP
[7.947 4.319 ] CP
[7.947 4.936 ] CP
[8.253 4.936 ] CP
[8.558 4.936 ] CP
[8.558 5.553 ] CP
[8.864 5.553 ] CP
[8.864 4.936 ] CP
[8.864 4.319 ] CP
[9.170 3.702 ] CP
[9.170 4.319 ] CP
[9.475 4.319 ] CP
[9.475 4.936 ] CP
[9.781 4.936 ] CP
[9.781 5.553 ] CP
[10.087 5.553 ] CP
[10.087 6.170 ] CP
[10.392 6.170 ] CP
[10.698 6.170 ] CP
[11.004 5.553 ] CP
[11.004 4.936 ] CP
[11.004 4.319 ] CP
[11.309 4.319 ] CP
[11.615 4.319 ] CP
[11.615 3.702 ] CP
[11.921 3.702 ] CP
[12.226 3.702 ] CP
[12.532 3.702 ] CP
[12.838 3.702 ] CP
[13.143 3.702 ] CP
[13.143 4.319 ] CP
[13.449 4.936 ] CP
[13.449 5.553 ] CP
[13.755 5.553 ] CP
[13.755 6.170 ] CP
[14.060 6.170 ] CP
[14.060 6.787 ] CP
[14.366 6.787 ] CP
[14.672 6.787 ] CP
[14.977 6.787 ] CP
[14.977 6.170 ] CP
[14.977 5.553 ] CP
[14.977 4.936 ] CP
[14.977 4.319 ] CP
[14.977 3.702 ] CP
[14.977 3.085 ] CP
[14.977 2.468 ] CP
[14.977 1.850 ] CP
[15.283 1.850 ] CP
[15.589 1.850 ] CP
[16.200 1.233 ] CP
[16.506 1.233 ] CP
[16.506 1.850 ] CP
[16.506 2.468 ] CP
[16.811 2.468 ] CP
[17.117 2.468 ] CP
[17.117 3.085 ] CP
[17.117 3.702 ] CP
[17.423 3.702 ] CP
[17.728 3.702 ] CP
[17.728 4.319 ] CP
[18.034 4.319 ] CP
[18.340 4.319 ] CP
[18.645 4.319 ] CP
[18.645 3.702 ] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 168.636 88.717 0.000 0.000 20.120 26.701
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.001] CP
[1.012 3.000 1.696 1.235 2.053 3.706] CP
[2.411 6.177 2.768 8.383 3.125 10.324] CP
[3.482 12.266 3.795 11.825 4.063 9.001] CP
[4.331 6.177 4.524 4.412 4.643 3.706] CP
[4.762 3.000 5.030 4.235 5.447 7.412] CP
[5.864 10.589 6.161 13.501 6.340 16.149] CP
[6.519 18.796 6.801 18.973 7.188 16.678] CP
[7.575 14.384 8.066 11.295 8.662 7.412] CP
[9.257 3.529 9.704 1.853 10.001 2.382] CP
[10.299 2.912 10.567 4.235 10.805 6.353] CP
[11.043 8.471 11.371 9.618 11.787 9.795] CP
[12.204 9.971 12.591 9.618 12.948 8.736] CP
[13.305 7.853 13.648 7.853 13.975 8.736] CP
[14.303 9.618 14.615 9.883 14.913 9.530] CP
[15.211 9.177 15.672 9.442 16.297 10.324] CP
[16.922 11.207 17.443 11.560 17.860 11.383] CP
[18.277 11.207 18.664 10.766 19.021 10.060] CP
[19.378 9.354 19.720 8.559 20.048 7.677] CP
[20.375 6.794 20.703 6.883 21.030 7.942] CP
[21.358 9.001 21.730 9.795 22.146 10.324] CP
[22.563 10.854 22.980 10.677 23.397 9.795] CP
[23.813 8.912 24.185 8.736 24.513 9.265] CP
[24.840 9.795 25.570 10.060 26.701 10.060] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 164.599 115.597 0.000 0.000 29.887 17.704
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 13.990] CP
[0.410 4.663 0.846 0.317 1.308 0.953] CP
[1.770 1.589 2.180 4.239 2.540 8.902] CP
[2.899 13.566 3.489 18.229 4.310 22.892] CP
[5.131 27.556 5.747 29.039 6.158 27.344] CP
[6.568 25.648 6.927 22.786 7.235 18.759] CP
[7.543 14.731 7.979 11.446 8.544 8.902] CP
[9.108 6.359 9.647 6.783 10.160 10.174] CP
[10.673 13.566 11.033 16.321 11.238 18.441] CP
[11.443 20.561 12.008 19.713 12.931 15.897] CP
[13.855 12.082 14.804 10.810 15.779 12.082] CP
[16.754 13.354 17.396 13.778 17.704 13.354] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 166.451 133.486 0.000 0.000 24.951 17.704
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 11.679] CP
[0.410 3.893 0.846 0.265 1.308 0.796] CP
[1.770 1.327 2.180 3.539 2.540 7.432] CP
[2.899 11.325 3.489 15.218 4.310 19.111] CP
[5.131 23.005 5.747 24.243 6.157 22.828] CP
[6.568 21.412 6.927 19.023 7.235 15.661] CP
[7.543 12.298 7.979 9.555 8.544 7.432] CP
[9.108 5.308 9.647 5.662 10.160 8.494] CP
[10.673 11.325 11.033 13.626 11.238 15.395] CP
[11.443 17.165 12.008 16.457 12.931 13.272] CP
[13.855 10.086 14.804 9.025 15.779 10.086] CP
[16.754 11.148 17.396 11.502 17.704 11.148] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 167.844 151.986 0.000 0.000 20.930 16.481
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.797] CP
[0.382 3.265 0.788 0.222 1.218 0.667] CP
[1.648 1.113 2.030 2.968 2.364 6.234] CP
[2.699 9.500 3.248 12.766 4.012 16.032] CP
[4.777 19.297 5.350 20.337 5.732 19.149] CP
[6.114 17.961 6.449 15.957 6.735 13.137] CP
[7.022 10.316 7.428 8.016 7.954 6.234] CP
[8.479 4.453 8.981 4.750 9.458 7.125] CP
[9.936 9.500 10.271 11.430 10.462 12.914] CP
[10.653 14.399 11.178 13.805 12.038 11.133] CP
[12.898 8.461 13.782 7.570 14.690 8.461] CP
[15.597 9.352 16.194 9.648 16.481 9.352] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 169.270 168.729 0.000 0.000 15.412 31.178
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[31.178 7.472] CP
[30.877 6.177 30.890 4.324 30.405 4.152] CP
[30.193 4.076 30.119 4.776 29.984 5.337] CP
[29.614 6.882 29.761 8.691 29.282 9.844] CP
[28.989 10.551 28.718 10.624 28.369 10.319] CP
[28.067 10.053 27.964 9.384 27.737 8.658] CP
[27.343 7.395 27.291 6.041 26.824 5.100] CP
[26.607 4.664 26.428 4.324 26.192 4.626] CP
[25.495 5.516 25.681 8.410 25.069 9.844] CP
[24.648 10.829 24.310 11.297 23.805 11.030] CP
[22.671 10.431 22.177 8.248 21.347 5.575] CP
[21.077 4.706 21.121 3.508 20.785 2.966] CP
[20.290 2.167 19.873 2.387 19.381 3.203] CP
[18.927 3.954 18.783 5.031 18.538 6.523] CP
[18.093 9.236 18.564 12.223 17.836 14.114] CP
[17.336 15.412 16.804 15.157 16.221 14.351] CP
[15.701 13.632 15.571 12.321 15.238 10.793] CP
[15.107 10.192 15.096 9.712 14.957 9.133] CP
[14.749 8.268 14.490 8.198 14.325 7.235] CP
[14.058 5.682 14.364 4.162 14.044 2.728] CP
[13.689 1.144 13.288 -0.000 12.710 0.356] CP
[11.450 1.134 11.397 5.467 10.533 8.658] CP
[10.075 10.348 9.942 11.881 9.339 12.928] CP
[8.798 13.866 8.385 14.128 7.794 13.639] CP
[7.012 12.991 6.757 11.223 6.109 9.607] CP
[5.747 8.706 5.572 8.066 5.196 7.235] CP
[4.673 6.079 4.397 5.151 3.791 4.626] CP
[3.261 4.166 2.921 4.220 2.387 4.626] CP
[1.825 5.053 1.599 6.149 1.053 6.761] CP
[0.655 7.206 0.410 7.195 0.000 7.472] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%
%tfEndGrp
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 118.000 9.000 0.000 0.000 14.497 198.000 rect
%@EndRect
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 118.000 33.942 0.000 0.000 16.000 19.256 rect
%@EndRect
gsave
43.571 126.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -9.557 4.000 S
(c) -5.667 4.000 S
(e) 0.546 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 118.000 122.142 0.000 0.000 16.000 75.492 rect
%@EndRect
gsave
159.889 126.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(c) -37.357 4.000 S
(r) -31.143 4.000 S
(e) -26.481 4.000 S
(a) -20.267 4.000 S
(m) -14.053 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 71.228 132.497 71.228 118.000 Line
%@EndLine
%
%tfEndGrp
%
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 206.613 30.914 0.000 0.000 16.000 136.431 rect
%@EndRect
gsave
99.130 214.613 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -67.585 4.000 S
(b) -62.923 4.000 S
(\)) -55.923 4.000 S
( ) -51.261 4.000 S
(1) -47.761 4.000 S
(-) -40.761 4.000 S
(a) -36.099 4.000 S
(l) -29.885 4.000 S
(t) -25.995 4.000 S
(e) -22.106 4.000 S
(r) -15.892 4.000 S
(n) -11.230 4.000 S
(a) -4.230 4.000 S
(t) 1.983 4.000 S
(i) 5.873 4.000 S
(v) 9.762 4.000 S
(e) 16.762 4.000 S
(,) 22.976 4.000 S
( ) 26.476 4.000 S
(2) 29.976 4.000 S
(-) 36.976 4.000 S
(l) 41.638 4.000 S
(e) 45.528 4.000 S
(v) 51.742 4.000 S
(e) 58.742 4.000 S
(l) 64.956 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 132.000 9.000 0.000 0.000 14.497 198.000 rect
%@EndRect
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 132.000 19.942 0.000 0.000 16.000 13.213 rect
%@EndRect
gsave
26.549 140.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(a) -6.557 4.000 S
(y) -0.343 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 71.228 146.497 71.228 132.000 Line
%@EndLine
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 132.000 55.942 0.000 0.000 16.000 5.448 rect
%@EndRect
gsave
58.666 140.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(s) -2.557 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 132.000 82.942 0.000 0.000 16.000 7.000 rect
%@EndRect
gsave
86.442 140.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(k) -2.557 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 132.000 102.942 0.000 0.000 16.000 4.662 rect
%@EndRect
gsave
105.273 140.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(r) -1.557 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 132.000 131.942 0.000 0.000 16.000 10.889 rect
%@EndRect
gsave
137.387 140.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -4.557 4.000 S
(y) -0.667 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 132.000 176.942 0.000 0.000 16.000 10.889 rect
%@EndRect
gsave
182.387 140.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(m) -4.557 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 98.228 146.497 98.228 132.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 113.228 146.497 113.228 132.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 167.228 146.497 167.228 132.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 44.228 146.497 44.228 132.000 Line
%@EndLine
%
%tfEndGrp
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 317.496 11.312 0.000 0.000 23.100 17.092
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[-0.000 10.813] CP
[0.396 3.604 0.817 0.245 1.263 0.737] CP
[1.709 1.228 2.105 3.276 2.452 6.881] CP
[2.799 10.485 3.369 14.089 4.161 17.694] CP
[4.954 21.298 5.548 22.445 5.945 21.134] CP
[6.341 19.823 6.688 17.612 6.985 14.499] CP
[7.283 11.386 7.704 8.847 8.249 6.881] CP
[8.794 4.915 9.314 5.242 9.809 7.864] CP
[10.305 10.485 10.652 12.615 10.850 14.253] CP
[11.048 15.891 11.593 15.236 12.485 12.287] CP
[13.377 9.338 14.293 8.355 15.234 9.338] CP
[16.176 10.321 16.795 10.649 17.092 10.321] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 315.038 28.554 0.000 0.000 20.643 19.768
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 12.812] CP
[0.590 12.338 1.081 11.547 1.475 10.440] CP
[1.868 9.332 2.175 8.344 2.397 7.474] CP
[2.618 6.604 2.839 5.378 3.061 3.796] CP
[3.282 2.214 3.565 1.186 3.909 0.711] CP
[4.253 0.237 4.597 0.672 4.942 2.016] CP
[5.286 3.361 5.556 4.785 5.753 6.287] CP
[5.950 7.790 6.110 8.739 6.232 9.135] CP
[6.355 9.530 6.491 10.479 6.638 11.982] CP
[6.786 13.485 7.068 15.146 7.486 16.965] CP
[7.904 18.784 8.224 19.852 8.445 20.168] CP
[8.667 20.484 8.962 20.524 9.330 20.287] CP
[9.699 20.049 9.945 19.654 10.068 19.100] CP
[10.191 18.547 10.400 17.321 10.695 15.422] CP
[10.990 13.524 11.273 12.022 11.543 10.914] CP
[11.814 9.807 12.023 8.779 12.170 7.830] CP
[12.318 6.881 12.490 6.920 12.687 7.948] CP
[12.883 8.976 13.092 10.163 13.314 11.507] CP
[13.535 12.852 13.805 13.801 14.125 14.355] CP
[14.445 14.908 14.678 14.394 14.826 12.812] CP
[14.973 11.231 15.109 9.886 15.231 8.779] CP
[15.354 7.671 15.576 7.671 15.895 8.779] CP
[16.215 9.886 16.498 11.151 16.744 12.575] CP
[16.989 13.999 17.235 14.790 17.481 14.948] CP
[17.727 15.106 17.936 14.592 18.108 13.406] CP
[18.280 12.219 18.551 11.428 18.920 11.033] CP
[19.288 10.637 19.571 11.072 19.768 12.338] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 318.688 48.593 0.000 0.000 17.129 21.214
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.343] CP
[1.247 3.114] CP
[2.495 17.129 ] CP
[3.743 0.000 ] CP
[4.991 17.129 ] CP
[6.239 1.557 ] CP
[7.487 17.129 ] CP
[8.735 0.000 ] CP
[9.983 17.129 ] CP
[11.231 0.000 ] CP
[12.479 17.129 ] CP
[13.727 1.557 ] CP
[14.975 17.129 ] CP
[16.223 4.671 ] CP
[17.471 15.572 ] CP
[18.719 6.228 ] CP
[19.967 12.457 ] CP
[21.214 9.343 ] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 325.901 69.692 0.000 0.000 6.787 18.645
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 1.850] CP
[0.305 1.233] CP
[0.305 0.616 ] CP
[0.611 0.616 ] CP
[0.611 -0.000 ] CP
[0.917 -0.000 ] CP
[0.917 0.616 ] CP
[1.222 0.616 ] CP
[1.528 1.233 ] CP
[1.834 1.233 ] CP
[1.834 1.850 ] CP
[2.139 1.850 ] CP
[2.445 1.850 ] CP
[2.445 2.468 ] CP
[2.751 2.468 ] CP
[2.751 3.085 ] CP
[2.751 3.702 ] CP
[3.056 4.936 ] CP
[3.362 4.936 ] CP
[3.668 4.936 ] CP
[3.973 4.936 ] CP
[4.279 4.936 ] CP
[4.585 4.936 ] CP
[4.890 4.319 ] CP
[4.890 3.702 ] CP
[5.196 3.702 ] CP
[5.196 3.085 ] CP
[5.502 3.085 ] CP
[5.502 2.468 ] CP
[5.807 2.468 ] CP
[6.113 2.468 ] CP
[7.030 2.468 ] CP
[7.336 3.085 ] CP
[7.336 3.702 ] CP
[7.641 3.702 ] CP
[7.641 4.319 ] CP
[7.947 4.319 ] CP
[7.947 4.936 ] CP
[8.253 4.936 ] CP
[8.558 4.936 ] CP
[8.558 5.553 ] CP
[8.864 5.553 ] CP
[8.864 4.936 ] CP
[8.864 4.319 ] CP
[9.170 3.702 ] CP
[9.170 4.319 ] CP
[9.475 4.319 ] CP
[9.475 4.936 ] CP
[9.781 4.936 ] CP
[9.781 5.553 ] CP
[10.087 5.553 ] CP
[10.087 6.170 ] CP
[10.392 6.170 ] CP
[10.698 6.170 ] CP
[11.004 5.553 ] CP
[11.004 4.936 ] CP
[11.004 4.319 ] CP
[11.309 4.319 ] CP
[11.615 4.319 ] CP
[11.615 3.702 ] CP
[11.921 3.702 ] CP
[12.226 3.702 ] CP
[12.532 3.702 ] CP
[12.838 3.702 ] CP
[13.143 3.702 ] CP
[13.143 4.319 ] CP
[13.449 4.936 ] CP
[13.449 5.553 ] CP
[13.755 5.553 ] CP
[13.755 6.170 ] CP
[14.060 6.170 ] CP
[14.060 6.787 ] CP
[14.366 6.787 ] CP
[14.672 6.787 ] CP
[14.977 6.787 ] CP
[14.977 6.170 ] CP
[14.977 5.553 ] CP
[14.977 4.936 ] CP
[14.977 4.319 ] CP
[14.977 3.702 ] CP
[14.977 3.085 ] CP
[14.977 2.468 ] CP
[14.977 1.850 ] CP
[15.283 1.850 ] CP
[15.589 1.850 ] CP
[16.200 1.233 ] CP
[16.506 1.233 ] CP
[16.506 1.850 ] CP
[16.506 2.468 ] CP
[16.811 2.468 ] CP
[17.117 2.468 ] CP
[17.117 3.085 ] CP
[17.117 3.702 ] CP
[17.423 3.702 ] CP
[17.728 3.702 ] CP
[17.728 4.319 ] CP
[18.034 4.319 ] CP
[18.340 4.319 ] CP
[18.645 4.319 ] CP
[18.645 3.702 ] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 320.636 88.717 0.000 0.000 20.120 26.701
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.001] CP
[1.012 3.000 1.696 1.235 2.053 3.706] CP
[2.411 6.177 2.768 8.383 3.125 10.324] CP
[3.482 12.266 3.795 11.825 4.063 9.001] CP
[4.331 6.177 4.524 4.412 4.643 3.706] CP
[4.762 3.000 5.030 4.235 5.447 7.412] CP
[5.864 10.589 6.161 13.501 6.340 16.149] CP
[6.519 18.796 6.801 18.973 7.188 16.678] CP
[7.575 14.384 8.066 11.295 8.662 7.412] CP
[9.257 3.529 9.704 1.853 10.001 2.382] CP
[10.299 2.912 10.567 4.235 10.805 6.353] CP
[11.043 8.471 11.371 9.618 11.787 9.795] CP
[12.204 9.971 12.591 9.618 12.948 8.736] CP
[13.305 7.853 13.648 7.853 13.975 8.736] CP
[14.303 9.618 14.615 9.883 14.913 9.530] CP
[15.211 9.177 15.672 9.442 16.297 10.324] CP
[16.922 11.207 17.443 11.560 17.860 11.383] CP
[18.277 11.207 18.664 10.766 19.021 10.060] CP
[19.378 9.354 19.720 8.559 20.048 7.677] CP
[20.375 6.794 20.703 6.883 21.030 7.942] CP
[21.358 9.001 21.730 9.795 22.146 10.324] CP
[22.563 10.854 22.980 10.677 23.397 9.795] CP
[23.813 8.912 24.185 8.736 24.513 9.265] CP
[24.840 9.795 25.570 10.060 26.701 10.060] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 316.599 115.597 0.000 0.000 29.887 17.704
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 13.990] CP
[0.410 4.663 0.846 0.317 1.308 0.953] CP
[1.770 1.589 2.180 4.239 2.540 8.902] CP
[2.899 13.566 3.489 18.229 4.310 22.892] CP
[5.131 27.556 5.747 29.039 6.158 27.344] CP
[6.568 25.648 6.927 22.786 7.235 18.759] CP
[7.543 14.731 7.979 11.446 8.544 8.902] CP
[9.108 6.359 9.647 6.783 10.160 10.174] CP
[10.673 13.566 11.033 16.321 11.238 18.441] CP
[11.443 20.561 12.008 19.713 12.931 15.897] CP
[13.855 12.082 14.804 10.810 15.779 12.082] CP
[16.754 13.354 17.396 13.778 17.704 13.354] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 318.451 133.486 0.000 0.000 24.951 17.704
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 11.679] CP
[0.410 3.893 0.846 0.265 1.308 0.796] CP
[1.770 1.327 2.180 3.539 2.540 7.432] CP
[2.899 11.325 3.489 15.218 4.310 19.111] CP
[5.131 23.005 5.747 24.243 6.157 22.828] CP
[6.568 21.412 6.927 19.023 7.235 15.661] CP
[7.543 12.298 7.979 9.555 8.544 7.432] CP
[9.108 5.308 9.647 5.662 10.160 8.494] CP
[10.673 11.325 11.033 13.626 11.238 15.395] CP
[11.443 17.165 12.008 16.457 12.931 13.272] CP
[13.855 10.086 14.804 9.025 15.779 10.086] CP
[16.754 11.148 17.396 11.502 17.704 11.148] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 319.844 151.986 0.000 0.000 20.930 16.481
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.797] CP
[0.382 3.265 0.788 0.222 1.218 0.667] CP
[1.648 1.113 2.030 2.968 2.364 6.234] CP
[2.699 9.500 3.248 12.766 4.012 16.032] CP
[4.777 19.297 5.350 20.337 5.732 19.149] CP
[6.114 17.961 6.449 15.957 6.735 13.137] CP
[7.022 10.316 7.428 8.016 7.954 6.234] CP
[8.479 4.453 8.981 4.750 9.458 7.125] CP
[9.936 9.500 10.271 11.430 10.462 12.914] CP
[10.653 14.399 11.178 13.805 12.038 11.133] CP
[12.898 8.461 13.782 7.570 14.690 8.461] CP
[15.597 9.352 16.194 9.648 16.481 9.352] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 321.270 168.729 0.000 0.000 15.412 31.178
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[31.178 7.472] CP
[30.877 6.177 30.890 4.324 30.405 4.152] CP
[30.193 4.076 30.119 4.776 29.984 5.337] CP
[29.614 6.882 29.761 8.691 29.282 9.844] CP
[28.989 10.551 28.718 10.624 28.369 10.319] CP
[28.067 10.053 27.964 9.384 27.737 8.658] CP
[27.343 7.395 27.291 6.041 26.824 5.100] CP
[26.607 4.664 26.428 4.324 26.192 4.626] CP
[25.495 5.516 25.681 8.410 25.069 9.844] CP
[24.648 10.829 24.310 11.297 23.805 11.030] CP
[22.671 10.431 22.177 8.248 21.347 5.575] CP
[21.077 4.706 21.121 3.508 20.785 2.966] CP
[20.290 2.167 19.873 2.387 19.381 3.203] CP
[18.927 3.954 18.783 5.031 18.538 6.523] CP
[18.093 9.236 18.564 12.223 17.836 14.114] CP
[17.336 15.412 16.804 15.157 16.221 14.351] CP
[15.701 13.632 15.571 12.321 15.238 10.793] CP
[15.107 10.192 15.096 9.712 14.957 9.133] CP
[14.749 8.268 14.490 8.198 14.325 7.235] CP
[14.058 5.682 14.364 4.162 14.044 2.728] CP
[13.689 1.144 13.288 -0.000 12.710 0.356] CP
[11.450 1.134 11.397 5.467 10.533 8.658] CP
[10.075 10.348 9.942 11.881 9.339 12.928] CP
[8.798 13.866 8.385 14.128 7.794 13.639] CP
[7.012 12.991 6.757 11.223 6.109 9.607] CP
[5.747 8.706 5.572 8.066 5.196 7.235] CP
[4.673 6.079 4.397 5.151 3.791 4.626] CP
[3.261 4.166 2.921 4.220 2.387 4.626] CP
[1.825 5.053 1.599 6.149 1.053 6.761] CP
[0.655 7.206 0.410 7.195 0.000 7.472] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 288.000 9.000 0.000 0.000 14.497 198.000 rect
%@EndRect
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 288.000 33.942 0.000 0.000 16.000 24.875 rect
%@EndRect
gsave
46.380 296.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(e) -11.557 4.000 S
(y) -5.343 4.000 S
(e) 1.656 4.000 S
(s) 7.870 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 288.000 122.142 0.000 0.000 16.000 75.492 rect
%@EndRect
gsave
159.889 296.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(c) -37.357 4.000 S
(r) -31.143 4.000 S
(e) -26.481 4.000 S
(a) -20.267 4.000 S
(m) -14.053 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 71.228 302.497 71.228 288.000 Line
%@EndLine
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 358.613 30.914 0.000 0.000 16.000 135.645 rect
%@EndRect
gsave
98.737 366.613 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -67.585 4.000 S
(c) -62.923 4.000 S
(\)) -56.709 4.000 S
( ) -52.047 4.000 S
(3) -48.547 4.000 S
(-) -41.547 4.000 S
(a) -36.885 4.000 S
(l) -30.671 4.000 S
(t) -26.781 4.000 S
(e) -22.892 4.000 S
(r) -16.678 4.000 S
(n) -12.016 4.000 S
(a) -5.016 4.000 S
(t) 1.197 4.000 S
(i) 5.087 4.000 S
(v) 8.976 4.000 S
(e) 15.976 4.000 S
(,) 22.190 4.000 S
( ) 25.690 4.000 S
(1) 29.190 4.000 S
(-) 36.190 4.000 S
(l) 40.852 4.000 S
(e) 44.742 4.000 S
(v) 50.956 4.000 S
(e) 57.956 4.000 S
(l) 64.170 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 270.000 9.000 0.000 0.000 14.497 198.000 rect
%@EndRect
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 270.000 33.942 0.000 0.000 16.000 19.256 rect
%@EndRect
gsave
43.571 278.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -9.557 4.000 S
(c) -5.667 4.000 S
(e) 0.546 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 270.000 122.142 0.000 0.000 16.000 75.492 rect
%@EndRect
gsave
159.889 278.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(c) -37.357 4.000 S
(r) -31.143 4.000 S
(e) -26.481 4.000 S
(a) -20.267 4.000 S
(m) -14.053 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 71.228 284.497 71.228 270.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 252.000 9.000 0.000 0.000 14.497 198.000 rect
%@EndRect
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 252.000 33.942 0.000 0.000 16.000 4.662 rect
%@EndRect
gsave
36.273 260.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(I) -1.557 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 252.000 104.142 0.000 0.000 16.000 39.641 rect
%@EndRect
gsave
123.963 260.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(s) -19.357 4.000 S
(c) -13.908 4.000 S
(r) -7.695 4.000 S
(e) -3.032 4.000 S
(a) 3.180 4.000 S
(m) 9.394 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 53.228 266.497 53.228 252.000 Line
%@EndLine
%
%tfEndGrp
%
restore
%%Trailer
end
