%!PS-Adobe-2.0 EPSF-1.2
%%Title: Tool.disc.eps
%%Creator: CLARIS EPSF Export Filter V1.0
%%CreationDate:10/29/95  11:35:52 p.m.
%%BoundingBox: 44.000 559.137 297.366 752.262                                                          
%%QDBoundingBox: 44.000 39.737 297.366 232.862                                                           
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%ObjectsIncluded: tText=T tLine=T tRect=T tRRect=F tOval=T tArc=F tFree=F tPoly=T tBMap=F tNote=F tBez=T tPMap=F 
%%AttributesIncluded: kBaWPattType=T kPixPattType=T kGradientType=F 
%%EndComments
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
%%BeginProcSet : rect 
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
%%EndProcSet 
%%BeginProcSet : R 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
%%EndProcSet
%%BeginProcSet : SaveScreenBW
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
  } bind def
%%EndProcSet
%%BeginProcSet : RestoreScreenBW
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
%%EndProcSet
%%BeginProcSet : SetFreqAngleBW
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
%%EndProcSet
%%BeginProcSet : SaveScreenColor 
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
  } bind def
%%EndProcSet
%%BeginProcSet : RestoreColorScreen
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
%%EndProcSet
%%BeginProcSet : SetFreqAngleColor
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
%%EndProcSet 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
%%BeginProcSet : Text Attributes Procs
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
%%EndProcSet
%%BeginProcSet : clip2pathbbox
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
%%EndProcSet 
%% Line takes the following arguments:
%% linewidth xEnd yEnd xStart yStart
%%BeginProcSet : Line
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
%%EndProcSet 
%%BeginProcSet : SR 
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
%%EndProcSet 
%%BeginProcSet : E
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
%%EndProcSet


/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


%%EndProlog
initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
%
%tLayer
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.199 setcmykcolor end} {0.800 0.800 0.800 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
2.000 0 126.000 45.000 0.000 0.000 45.000 135.000 rect
%@EndRect
%@BeginText
save
%%IncludeFont: Times-Bold
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Bold /Times-Bold EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 131.500 58.500 0.000 0.000 31.000 114.551 rect
%@EndRect
gsave
115.775 147.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Bold) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(H) -57.000 -3.000 S
(I) -46.110 -3.000 S
10.000 (_Times-Bold) fess
(N) -40.662 -3.000 S
(I) -33.079 -3.000 S
(T) -28.993 -3.000 S
14.000 (_Times-Bold) fess
( ) -21.989 -3.000 S
(/) -18.489 -3.000 S
( ) -14.600 -3.000 S
(H) -11.100 -3.000 S
(S) -0.210 -3.000 S
10.000 (_Times-Bold) fess
(M) 7.575 -3.000 S
(O) 17.486 -3.000 S
(O) 25.653 -3.000 S
(T) 33.820 -3.000 S
(H) 40.823 -3.000 S
14.000 (_Times-Bold) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(H) -57.000 12.000 S
(R) -46.110 12.000 S
10.000 (_Times-Bold) fess
(E) -36.000 12.000 S
(S) -28.996 12.000 S
(T) -23.156 12.000 S
14.000 (_Times-Bold) fess
( ) -16.153 12.000 S
(/) -12.653 12.000 S
( ) -8.763 12.000 S
(H) -5.263 12.000 S
(E) 5.625 12.000 S
(R) 14.963 12.000 S
10.000 (_Times-Bold) fess
(E) 25.073 12.000 S
(S) 32.077 12.000 S
(T) 37.916 12.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
2.000 setlinewidth
117.000 117.000 moveto
/Triangular 16.799 8.399 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
2.000 116.999 113.000 117.000 81.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
2.000 setlinewidth
117.000 198.000 moveto
/Triangular 16.799 8.399 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
2.000 116.999 194.000 117.000 171.000 Line
%@EndLine
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.199 setcmykcolor end} {0.800 0.800 0.800 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 219.723 56.500 0.000 0.000 11.375 10.658 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 198.237 79.277 0.000 0.000 23.887 9.859 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.199 setcmykcolor end} {0.800 0.800 0.800 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 218.712 77.817 0.000 0.000 13.649 13.145 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
104.108 225.537 moveto
/Triangular 8.224 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 102.941 225.537 90.962 225.537 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
79.277 211.887 moveto
/Triangular 8.224 7.049 false 275.022 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 79.379 210.725 79.642 207.716 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 198.237 105.568 0.000 0.000 23.887 9.859 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.199 setcmykcolor end} {0.800 0.800 0.800 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 218.712 104.108 0.000 0.000 13.649 13.145 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
130.399 225.537 moveto
/Triangular 8.224 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 129.232 225.537 117.253 225.537 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
105.568 211.887 moveto
/Triangular 8.224 7.049 false 275.022 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 105.670 210.725 105.934 207.716 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 198.237 131.860 0.000 0.000 23.887 9.859 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.199 setcmykcolor end} {0.800 0.800 0.800 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 218.712 130.399 0.000 0.000 13.649 13.145 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
156.690 225.537 moveto
/Triangular 8.224 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 155.523 225.537 143.545 225.537 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
131.860 211.887 moveto
/Triangular 8.224 7.049 false 275.022 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 131.961 210.725 132.225 207.716 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
77.817 225.621 moveto
/Triangular 8.224 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 76.650 225.621 67.158 225.621 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.199 setcmykcolor end} {0.800 0.800 0.800 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 219.723 155.980 0.000 0.000 11.375 10.658 rect
%@EndOval
%
%tfEndGrp
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 62.274 59.500 0.000 0.000 11.666 10.161 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 40.237 81.215 0.000 0.000 24.499 9.399 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 61.237 79.822 0.000 0.000 13.999 12.532 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
104.887 68.237 moveto
/Triangular 8.224 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 103.720 68.237 92.354 68.237 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
81.215 54.237 moveto
/Triangular 8.224 7.049 false 274.672 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 81.309 53.074 81.563 49.959 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 40.237 106.279 0.000 0.000 24.499 9.399 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 61.237 104.887 0.000 0.000 13.999 12.532 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
129.951 68.237 moveto
/Triangular 8.224 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 128.784 68.237 117.419 68.237 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
106.279 54.237 moveto
/Triangular 8.224 7.049 false 274.672 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 106.374 53.074 106.627 49.959 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 40.237 131.344 0.000 0.000 24.499 9.399 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 61.237 129.951 0.000 0.000 13.999 12.532 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
155.016 68.237 moveto
/Triangular 8.224 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.849 68.237 142.483 68.237 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
131.344 54.237 moveto
/Triangular 8.224 7.049 false 274.672 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 131.438 53.074 131.692 49.959 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
79.822 68.323 moveto
/Triangular 8.224 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 78.655 68.323 69.661 68.323 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 62.274 154.338 0.000 0.000 11.666 10.161 rect
%@EndOval
%
%tfEndGrp
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 46.830 202.000 0.000 0.000 15.236 12.682
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 7.131] CP
[0.294 2.377 0.606 0.162 0.937 0.486] CP
[1.268 0.810 1.562 2.161 1.819 4.538] CP
[2.076 6.915 2.499 9.293 3.087 11.670] CP
[3.675 14.047 4.117 14.804 4.411 13.939] CP
[4.705 13.075 4.962 11.616 5.183 9.563] CP
[5.403 7.510 5.716 5.835 6.120 4.538] CP
[6.524 3.241 6.910 3.457 7.278 5.186] CP
[7.646 6.915 7.903 8.320 8.050 9.401] CP
[8.197 10.481 8.601 10.049 9.263 8.104] CP
[9.925 6.159 10.605 5.511 11.303 6.159] CP
[12.002 6.807 12.461 7.023 12.682 6.807] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 45.209 214.792 0.000 0.000 13.615 14.667
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 8.450] CP
[0.437 8.137 0.802 7.616 1.094 6.885] CP
[1.386 6.155 1.614 5.503 1.778 4.929] CP
[1.942 4.355 2.107 3.547 2.271 2.503] CP
[2.435 1.460 2.645 0.782 2.900 0.469] CP
[3.156 0.156 3.411 0.443 3.666 1.330] CP
[3.922 2.217 4.122 3.156 4.268 4.147] CP
[4.414 5.138 4.533 5.764 4.624 6.025] CP
[4.715 6.286 4.816 6.912 4.925 7.903] CP
[5.035 8.894 5.244 9.989 5.554 11.189] CP
[5.865 12.389 6.102 13.093 6.266 13.302] CP
[6.430 13.511 6.649 13.537 6.923 13.380] CP
[7.196 13.224 7.379 12.963 7.470 12.598] CP
[7.561 12.232 7.716 11.424 7.935 10.172] CP
[8.154 8.920 8.364 7.929 8.565 7.198] CP
[8.765 6.468 8.920 5.790 9.030 5.164] CP
[9.139 4.538 9.267 4.564 9.413 5.242] CP
[9.559 5.920 9.714 6.703 9.878 7.590] CP
[10.042 8.477 10.243 9.103 10.480 9.468] CP
[10.717 9.833 10.890 9.494 11.000 8.450] CP
[11.109 7.407 11.210 6.520 11.301 5.790] CP
[11.392 5.060 11.556 5.060 11.794 5.790] CP
[12.031 6.520 12.240 7.355 12.423 8.294] CP
[12.605 9.233 12.788 9.755 12.970 9.859] CP
[13.153 9.963 13.308 9.624 13.435 8.842] CP
[13.563 8.059 13.764 7.538 14.037 7.277] CP
[14.311 7.016 14.521 7.303 14.667 8.137] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 46.643 229.585 0.000 0.000 13.270 19.811
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 5.936] CP
[0.750 1.978 1.258 0.814 1.523 2.444] CP
[1.788 4.074 2.053 5.529 2.319 6.809] CP
[2.584 8.090 2.815 7.799 3.014 5.936] CP
[3.213 4.074 3.357 2.910 3.445 2.444] CP
[3.533 1.978 3.732 2.793 4.041 4.889] CP
[4.350 6.984 4.571 8.905 4.704 10.651] CP
[4.836 12.397 5.046 12.513 5.333 11.000] CP
[5.620 9.487 5.985 7.450 6.427 4.889] CP
[6.868 2.328 7.200 1.222 7.420 1.571] CP
[7.641 1.920 7.840 2.793 8.017 4.190] CP
[8.193 5.587 8.436 6.344 8.746 6.460] CP
[9.055 6.577 9.342 6.344 9.607 5.762] CP
[9.872 5.180 10.126 5.180 10.369 5.762] CP
[10.612 6.344 10.844 6.518 11.065 6.286] CP
[11.285 6.053 11.628 6.227 12.092 6.809] CP
[12.555 7.391 12.942 7.624 13.251 7.508] CP
[13.560 7.391 13.847 7.100 14.112 6.635] CP
[14.377 6.169 14.631 5.645 14.874 5.063] CP
[15.117 4.481 15.360 4.539 15.603 5.238] CP
[15.846 5.936 16.122 6.460 16.431 6.809] CP
[16.741 7.159 17.050 7.042 17.359 6.460] CP
[17.668 5.878 17.944 5.762 18.187 6.111] CP
[18.430 6.460 18.971 6.635 19.811 6.635] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 46.830 249.271 0.000 0.000 15.236 12.682
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 7.131] CP
[0.294 2.377 0.606 0.162 0.937 0.486] CP
[1.268 0.810 1.562 2.161 1.819 4.538] CP
[2.076 6.915 2.499 9.293 3.087 11.670] CP
[3.675 14.047 4.117 14.804 4.411 13.939] CP
[4.705 13.075 4.962 11.616 5.183 9.563] CP
[5.403 7.510 5.716 5.835 6.120 4.538] CP
[6.524 3.241 6.910 3.457 7.278 5.186] CP
[7.646 6.915 7.903 8.320 8.050 9.401] CP
[8.197 10.481 8.601 10.049 9.263 8.104] CP
[9.925 6.159 10.605 5.511 11.303 6.159] CP
[12.002 6.807 12.461 7.023 12.682 6.807] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 45.209 262.064 0.000 0.000 13.615 14.667
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 8.450] CP
[0.437 8.137 0.802 7.616 1.094 6.885] CP
[1.386 6.155 1.614 5.503 1.778 4.929] CP
[1.942 4.355 2.107 3.547 2.271 2.503] CP
[2.435 1.460 2.645 0.782 2.900 0.469] CP
[3.156 0.156 3.411 0.443 3.666 1.330] CP
[3.922 2.217 4.122 3.156 4.268 4.147] CP
[4.414 5.138 4.533 5.764 4.624 6.025] CP
[4.715 6.286 4.816 6.912 4.925 7.903] CP
[5.035 8.894 5.244 9.989 5.554 11.189] CP
[5.865 12.389 6.102 13.093 6.266 13.302] CP
[6.430 13.511 6.649 13.537 6.923 13.380] CP
[7.196 13.224 7.379 12.963 7.470 12.598] CP
[7.561 12.232 7.716 11.424 7.935 10.172] CP
[8.154 8.920 8.364 7.929 8.565 7.198] CP
[8.765 6.468 8.920 5.790 9.030 5.164] CP
[9.139 4.538 9.267 4.564 9.413 5.242] CP
[9.559 5.920 9.714 6.703 9.878 7.590] CP
[10.042 8.477 10.243 9.103 10.480 9.468] CP
[10.717 9.833 10.890 9.494 11.000 8.450] CP
[11.109 7.407 11.210 6.520 11.301 5.790] CP
[11.392 5.060 11.556 5.060 11.793 5.790] CP
[12.031 6.520 12.240 7.355 12.423 8.294] CP
[12.605 9.233 12.788 9.755 12.970 9.859] CP
[13.153 9.963 13.308 9.624 13.435 8.842] CP
[13.563 8.059 13.764 7.538 14.037 7.277] CP
[14.311 7.016 14.521 7.303 14.667 8.137] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 46.643 276.856 0.000 0.000 13.270 19.811
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 5.936] CP
[0.750 1.978 1.258 0.814 1.523 2.444] CP
[1.788 4.074 2.054 5.529 2.319 6.809] CP
[2.584 8.090 2.815 7.799 3.014 5.936] CP
[3.213 4.074 3.357 2.910 3.445 2.444] CP
[3.533 1.978 3.732 2.793 4.041 4.889] CP
[4.350 6.984 4.571 8.905 4.704 10.651] CP
[4.836 12.397 5.046 12.513 5.333 11.000] CP
[5.620 9.487 5.985 7.450 6.427 4.889] CP
[6.868 2.328 7.200 1.222 7.420 1.571] CP
[7.641 1.920 7.840 2.793 8.017 4.190] CP
[8.193 5.587 8.436 6.344 8.746 6.460] CP
[9.055 6.577 9.342 6.344 9.607 5.762] CP
[9.872 5.180 10.126 5.180 10.369 5.762] CP
[10.612 6.344 10.844 6.518 11.065 6.286] CP
[11.285 6.053 11.628 6.227 12.092 6.809] CP
[12.555 7.391 12.942 7.624 13.251 7.508] CP
[13.560 7.391 13.847 7.100 14.112 6.635] CP
[14.377 6.169 14.631 5.645 14.874 5.063] CP
[15.117 4.481 15.360 4.539 15.603 5.238] CP
[15.846 5.936 16.122 6.460 16.431 6.809] CP
[16.741 7.159 17.050 7.042 17.359 6.460] CP
[17.668 5.878 17.944 5.762 18.187 6.111] CP
[18.430 6.460 18.971 6.635 19.811 6.635] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 69.195 284.183 0.000 0.000 15.236 12.682
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[12.682 7.131] CP
[12.388 2.377 12.075 0.162 11.744 0.486] CP
[11.414 0.810 11.119 2.161 10.862 4.538] CP
[10.605 6.915 10.182 9.293 9.594 11.670] CP
[9.006 14.047 8.565 14.804 8.271 13.939] CP
[7.976 13.075 7.719 11.616 7.499 9.563] CP
[7.278 7.510 6.966 5.835 6.561 4.538] CP
[6.157 3.241 5.771 3.457 5.403 5.186] CP
[5.036 6.915 4.778 8.320 4.631 9.401] CP
[4.484 10.481 4.080 10.049 3.418 8.104] CP
[2.757 6.159 2.076 5.511 1.378 6.159] CP
[0.680 6.807 0.220 7.023 0.000 6.807] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 67.574 269.406 0.000 0.000 13.615 14.667
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[14.667 8.450] CP
[14.229 8.137 13.864 7.616 13.572 6.885] CP
[13.280 6.155 13.052 5.503 12.888 4.929] CP
[12.724 4.355 12.560 3.547 12.396 2.503] CP
[12.231 1.460 12.022 0.782 11.766 0.469] CP
[11.511 0.156 11.255 0.443 11.000 1.330] CP
[10.745 2.217 10.544 3.156 10.398 4.147] CP
[10.252 5.138 10.133 5.764 10.042 6.025] CP
[9.951 6.286 9.851 6.912 9.741 7.903] CP
[9.632 8.894 9.422 9.989 9.112 11.189] CP
[8.802 12.389 8.565 13.093 8.400 13.302] CP
[8.236 13.511 8.017 13.537 7.744 13.380] CP
[7.470 13.224 7.288 12.963 7.196 12.598] CP
[7.105 12.232 6.950 11.424 6.731 10.172] CP
[6.512 8.920 6.302 7.929 6.102 7.198] CP
[5.901 6.468 5.746 5.790 5.637 5.164] CP
[5.527 4.538 5.399 4.564 5.253 5.242] CP
[5.107 5.920 4.952 6.703 4.788 7.590] CP
[4.624 8.477 4.423 9.103 4.186 9.468] CP
[3.949 9.833 3.776 9.494 3.666 8.450] CP
[3.557 7.407 3.457 6.520 3.365 5.790] CP
[3.274 5.060 3.110 5.060 2.873 5.790] CP
[2.636 6.520 2.426 7.355 2.243 8.294] CP
[2.061 9.233 1.878 9.755 1.696 9.859] CP
[1.514 9.963 1.359 9.624 1.231 8.842] CP
[1.103 8.059 0.903 7.538 0.629 7.277] CP
[0.355 7.016 0.145 7.303 0.000 8.137] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 69.009 249.469 0.000 0.000 13.270 19.811
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[19.811 5.936] CP
[19.060 1.978 18.552 0.814 18.287 2.444] CP
[18.022 4.074 17.757 5.529 17.492 6.809] CP
[17.227 8.090 16.995 7.799 16.796 5.936] CP
[16.597 4.074 16.454 2.910 16.365 2.444] CP
[16.277 1.978 16.078 2.793 15.769 4.889] CP
[15.460 6.984 15.239 8.905 15.106 10.651] CP
[14.974 12.397 14.764 12.513 14.477 11.000] CP
[14.190 9.487 13.825 7.450 13.384 4.889] CP
[12.942 2.328 12.611 1.222 12.390 1.571] CP
[12.169 1.920 11.970 2.793 11.793 4.190] CP
[11.617 5.587 11.374 6.344 11.065 6.460] CP
[10.755 6.577 10.468 6.344 10.203 5.762] CP
[9.938 5.180 9.684 5.180 9.441 5.762] CP
[9.198 6.344 8.966 6.518 8.746 6.286] CP
[8.525 6.053 8.182 6.227 7.719 6.809] CP
[7.255 7.391 6.868 7.624 6.559 7.508] CP
[6.250 7.391 5.963 7.100 5.698 6.635] CP
[5.433 6.169 5.179 5.645 4.936 5.063] CP
[4.693 4.481 4.450 4.539 4.207 5.238] CP
[3.964 5.936 3.688 6.460 3.379 6.809] CP
[3.069 7.159 2.760 7.042 2.451 6.460] CP
[2.142 5.878 1.866 5.762 1.623 6.111] CP
[1.380 6.460 0.839 6.635 -0.000 6.635] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 68.830 235.898 0.000 0.000 15.236 12.682
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[12.682 7.131] CP
[12.388 2.377 12.075 0.162 11.744 0.486] CP
[11.414 0.810 11.119 2.161 10.862 4.538] CP
[10.605 6.915 10.182 9.293 9.594 11.670] CP
[9.006 14.047 8.565 14.804 8.271 13.939] CP
[7.976 13.075 7.719 11.616 7.499 9.563] CP
[7.278 7.510 6.966 5.835 6.561 4.538] CP
[6.157 3.241 5.771 3.457 5.403 5.186] CP
[5.036 6.915 4.778 8.320 4.631 9.401] CP
[4.484 10.481 4.080 10.049 3.418 8.104] CP
[2.757 6.159 2.076 5.511 1.378 6.159] CP
[0.680 6.807 0.220 7.023 0.000 6.807] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 67.209 221.120 0.000 0.000 13.615 14.667
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[14.667 8.450] CP
[14.229 8.137 13.864 7.616 13.572 6.885] CP
[13.280 6.155 13.052 5.503 12.888 4.929] CP
[12.724 4.355 12.560 3.547 12.396 2.503] CP
[12.231 1.460 12.022 0.782 11.766 0.469] CP
[11.511 0.156 11.255 0.443 11.000 1.330] CP
[10.745 2.217 10.544 3.156 10.398 4.147] CP
[10.252 5.138 10.133 5.764 10.042 6.025] CP
[9.951 6.286 9.851 6.912 9.741 7.903] CP
[9.632 8.894 9.422 9.989 9.112 11.189] CP
[8.802 12.389 8.565 13.093 8.400 13.302] CP
[8.236 13.511 8.017 13.537 7.744 13.380] CP
[7.470 13.224 7.288 12.963 7.196 12.598] CP
[7.105 12.232 6.950 11.424 6.731 10.172] CP
[6.512 8.920 6.302 7.929 6.102 7.198] CP
[5.901 6.468 5.746 5.790 5.637 5.164] CP
[5.527 4.538 5.399 4.564 5.253 5.242] CP
[5.108 5.920 4.952 6.703 4.788 7.590] CP
[4.624 8.477 4.423 9.103 4.186 9.468] CP
[3.949 9.833 3.776 9.494 3.666 8.450] CP
[3.557 7.407 3.457 6.520 3.365 5.790] CP
[3.274 5.060 3.110 5.060 2.873 5.790] CP
[2.636 6.520 2.426 7.355 2.243 8.294] CP
[2.061 9.233 1.879 9.755 1.696 9.859] CP
[1.514 9.963 1.359 9.624 1.231 8.842] CP
[1.103 8.059 0.903 7.538 0.629 7.277] CP
[0.355 7.016 0.145 7.303 0.000 8.137] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginBezi
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 68.558 200.634 0.000 0.000 13.270 19.811
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[19.811 5.936] CP
[19.060 1.978 18.552 0.814 18.287 2.444] CP
[18.022 4.074 17.757 5.529 17.492 6.809] CP
[17.227 8.090 16.995 7.799 16.796 5.936] CP
[16.597 4.074 16.454 2.910 16.365 2.444] CP
[16.277 1.978 16.078 2.793 15.769 4.889] CP
[15.460 6.984 15.239 8.905 15.106 10.651] CP
[14.974 12.397 14.764 12.513 14.477 11.000] CP
[14.190 9.487 13.825 7.450 13.384 4.889] CP
[12.942 2.328 12.611 1.222 12.390 1.571] CP
[12.169 1.920 11.970 2.793 11.793 4.190] CP
[11.617 5.587 11.374 6.344 11.065 6.460] CP
[10.755 6.577 10.468 6.344 10.203 5.762] CP
[9.938 5.180 9.684 5.180 9.441 5.762] CP
[9.198 6.344 8.966 6.518 8.746 6.286] CP
[8.525 6.053 8.182 6.227 7.719 6.809] CP
[7.255 7.391 6.868 7.624 6.559 7.508] CP
[6.250 7.391 5.963 7.100 5.698 6.635] CP
[5.433 6.169 5.179 5.645 4.936 5.063] CP
[4.693 4.481 4.450 4.539 4.207 5.238] CP
[3.964 5.936 3.688 6.460 3.379 6.809] CP
[3.069 7.159 2.760 7.042 2.451 6.460] CP
[2.142 5.878 1.866 5.762 1.623 6.111] CP
[1.380 6.460 0.839 6.635 0.000 6.635] CP
/useClip true def
PC PF
LC SS
saveobj restore
%@EndBezi
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.199 setcmykcolor end} {0.800 0.800 0.800 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
2.000 0 117.000 45.000 0.000 0.000 9.000 153.000
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.000] CP
[18.000 0.000] CP
[153.000 0.000 ] CP
[135.000 9.000 ] CP
[135.000 9.000 0.000 9.000 0.000 9.000] CP
closepath
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.250 setcmykcolor end} {0.750 0.750 0.750 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
2.000 0 117.000 180.000 0.000 0.000 54.000 18.000
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 9.000] CP
[18.000 0.000] CP
[18.000 36.000 ] CP
[0.000 54.000 ] CP
[0.000 54.000 0.000 9.000 0.000 9.000] CP
closepath
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginRect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.250 setcmykcolor end} {0.750 0.750 0.750 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
2.000 0 128.326 215.000 0.000 0.000 41.633 54.000 rect
%@EndRect
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.250 setcmykcolor end} {0.750 0.750 0.750 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
2.000 0 120.000 269.000 0.000 0.000 49.960 18.000
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 8.326] CP
[18.000 0.000] CP
[18.000 33.306 ] CP
[0.000 49.960 ] CP
[0.000 49.960 0.000 8.326 0.000 8.326] CP
closepath
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginPoly
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.250 setcmykcolor end} {0.750 0.750 0.750 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
2.000 0 120.000 215.000 0.000 0.000 8.326 72.000
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 8.326] CP
[18.000 0.000] CP
[72.000 0.000 ] CP
[54.000 8.326 ] CP
[54.000 8.326 0.000 8.326 0.000 8.326] CP
closepath
/useClip true def
PC PF
LC SS
saveobj restore
%@EndPoly
%
%tfEndGrp
%
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 138.571 218.576 0.000 0.000 16.000 51.531 rect
%@EndRect
gsave
244.341 146.571 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Bold) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(H) -24.923 4.000 S
(Q) -14.033 4.000 S
10.000 (_Times-Bold) fess
(U) -3.144 4.000 S
(A) 4.438 4.000 S
(N) 12.021 4.000 S
(T) 19.603 4.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
2.000 setlinewidth
256.000 123.000 moveto
/Triangular 9.799 8.399 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
2.000 255.999 120.666 256.000 92.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
2.000 setlinewidth
186.000 143.000 moveto
/Triangular 9.799 8.399 false 360.025 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
2.000 188.333 142.999 213.000 143.000 Line
%@EndLine
restore
%%Trailer
end
